pipeline {
	agent {
        label 'AGENT-1'
    }
    environment {
        appVersion = ''
        REGION = 'us-east-1'
        ACC_ID = '009160060207'
        PROJECT = 'roboshop'
    }
    options {
        timeout(time: 10, unit: 'MINUTES') 
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    /* parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    } */
	stages {
        stage('init'){
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                            sh """
                                cd 10-sg
                                terraform init -reconfigure
                            """
                        }
                    }
                }
            }
        stage('plan'){
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                            sh """
                                cd 10-sg
                                terraform plan
                            """
                        }
                    }
                }
            }
    stage('apply'){
            // input {
            //     message "Should we continue?"
            //     ok "Yes, we should."
            //     submitter "alice,bob"
            // }
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                            sh """
                                cd 10-sg
                                terraform apply -auto-approve
                            """
                        }
                    }
                }
            }
    stage('Bastion ACM EKS ALB'){
            parallel {
                stage('Trigger EKS'){
                    steps {
                        script {
                            build job: '60-eks', // Replace 'DownstreamJobName' with the actual name of your downstream job
                            propagate: false, // even SG fails VPC will not be effected
                            wait: false // VPC will not wait for SG pipeline completion
                        }
                }
            }
                stage('Trigger Baston'){
                    steps {
                        script {
                            build job: '20-bastion', // Replace 'DownstreamJobName' with the actual name of your downstream job
                            propagate: false, // even SG fails VPC will not be effected
                            wait: false // VPC will not wait for SG pipeline completion
                        }
                }
            }
            stage('ACM ALB') {
                // sequential
                stages {
                   stage('Trigger ACM'){
                        steps {
                            script {
                                build job: '40-acm', // Replace 'DownstreamJobName' with the actual name of your downstream job
                                propagate: false, // even SG fails VPC will not be effected
                                wait: false // VPC will not wait for SG pipeline completion
                            }
                        }
                    } 
                    stage('Trigger ALB'){
                        steps {
                            script {
                                build job: '50-ingress-alb', // Replace 'DownstreamJobName' with the actual name of your downstream job
                                propagate: false, // even SG fails VPC will not be effected
                                wait: false // VPC will not wait for SG pipeline completion
                            }
                        }
                    } 
                }
            }

        }
    }
}
	
    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        success { 
            echo 'I will always say success!'
        }
        failure { 
            echo 'I will always say failure!'
        }
    }
} 