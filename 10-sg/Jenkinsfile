pipeline {
    agent {
        label 'AGENT-1'
    }
    environment { 
        appVersion = ''
        REGION = "us-east-1"
        ACC_ID = '009160060207'
        PROJECT = "roboshop"
    }
    options {
        timeout(time: 30, unit: 'MINUTES') 
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    /* parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    } */
    stages {
        stage('init') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                        sh """
                            cd 10-sg
                            terraform init -reconfigure
                        """
                    }
                }
            }
        }

        stage('plan') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                        sh """
                            cd 10-sg
                            terraform plan
                        """
                    }
                }
            }
        }

        stage('apply') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                        sh """
                            cd 10-sg
                            terraform apply -auto-approve
                        """
                    }
                }
            }
        }

        stage('Bastion & EKS in Parallel') {
            parallel {
                stage('Trigger Bastion') {
                    steps {
                        script {
                            build job: '20-bastion',
                                  propagate: false,
                                  wait: false
                        }
                    }
                }
                stage('Trigger EKS') {
                    steps {
                        script {
                            build job: '80-eks',
                                  propagate: false,
                                  wait: false
                        }
                    }
                }
            }
        }

        stage('ACM â†’ ALB') {
            stages {
                stage('Trigger ACM') {
                    steps {
                        script {
                            build job: '60-acm',
                                  propagate: true,  // fail pipeline if ACM fails
                                  wait: true
                        }
                    }
                }
                stage('Trigger ALB') {
                    steps {
                        script {
                            build job: '70-frontend-alb',
                                  propagate: false,
                                  wait: true // ensures Jenkins waits until ALB finishes
                        }
                    }
                }
            }
        }
    }

    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        success { 
            echo 'I will always say Success'
        }
        failure { 
            echo 'I will always say Failure'
        }
    }
}
